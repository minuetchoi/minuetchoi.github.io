---
layout: post
title: "[GitHub] 05. 소스트리를 이용한 버전관리"
date: 2022-02-09 15:20:23 +0900
category: github
---
# 1. 소스트리 다운로드

소스트리는 Git 사용을 도와주는 GUI 프로그램입니다.

버튼을 클릭하는 방식으로 필요한 명령을 실행할 수 있게 해주며, Git의 핵심인 Commit, push, branch 등을 눈으로 쉽게 확인할 수 있게 해줍니다.

소스트리 다운로드 사이트 : [https://sourcetreeapp.com][https://sourcetreeapp.com]

<br>

![alt text](/public/img/github_14.png)

소스트리를 다운받을 때, 호스팅 계정 편집 창에서 호스팅 서비스를 꼭 'GitHub'로 설정해주셔야 합니다.

<br>

소스트리와 함께 비주얼 스튜디오 코드를 다운받아야 합니다. 

(저는 비주얼 스튜디오로 작업을 하기 때문에 코드를 따로 받을 필요는 없었지만, 책 커리큘럼대로 쭉 따라가 보기 위해 다운받았습니다.)

# 2. 소스트리 상단 탭 간단 설명

![alt text](/public/img/github_15.png)

1. Local: 컴퓨터에 저장되어 있는 Git 로컬저장소 목록을 보여줌. [Add]탭에서 소스트리에 추가할 수 있음

1. Remote: 원격저장소 계정에 연결되어 있는 모든 원격저장소를 볼 수 있음

1. Clone: 원격 서버에 올라와 있는 Git 저장소를 내 로컬 컴퓨터에 다운로드 및 연동

1. Add: 내 컴퓨터의 로컬저장소를 소스트리에서 관리할 수 있도록 추가

1. Create: 내 컴퓨터에 있는 일반 폴더를 Git으로 버전관리 할 수 있도록 로컬저장소로 생성. (git init)

# 3. 소스트리를 이용한 버전 관리

## 3-1. 로컬저장소를 소스트리에 불러오기
: 소스트리의 Add탭을 누르고, 버전 관리가 필요한 폴더를 추가

![alt text](/public/img/github_16.png)

[History]탭을 누르면 이전 포스팅에서 만들었던 커밋이 보입니다.(맨 위가 최신 버전)

[.git]파일에 이와 같은 정보들이 저장되어 있습니다.

Git은 폴더에 버전 관리한 데이터를 담은 [.git]파일과 이를 올릴 원격저장소 주소 등 필요한 정보를 저장합니다.

## 3-2. 소스트리로 커밋 만들고 푸시하기

메모장 대신 비주얼 스튜디오 코드를 통해 파일을 만들고 수정해보겠습니다.

비주얼 스튜디오 코드를 실행한 후, [File] - [Open Folder] - [이전 포스팅에 만들어뒀던 폴더]순서로 파일을 불러옵니다.

![alt text](/public/img/github_17.png)

파일을 불러오게 되면 위와 같이 폴더 안의 파일이 보입니다.

<br>

표시한 부분을 클릭하면 폴더 안에 새 파일을 만들 수 있는데, [mdTest.md]파일을 만들어 줍니다.

<br>

md 확장자(markdown)는 텍스트 문서를 적기 위한 파일로, 텍스트 앞에 #을 붙이면 이를 문서의 제목으로 인식해줍니다.

문서의 가독성을 높여줍니다.

![alt text](/public/img/github_18.png)

내용을 위처럼 수정해준 후, 소스트리로 돌아와줍니다.

<br>

소스트리의 [History]에서 맨 위에 '커밋하지 않은 변경사항' 텍스트가 생기는데, 마지막으로 커밋한 상태에서 변경 사항이 생겼다는 의미입니다.

이 텍스트를 누르면 아래 [스테이지에 올라가지 않은 파일]창에 방금 만든 [mdTest.md]파일이 보입니다.
([스테이지에 올라가지 않은 파일]창이 보이지 않을 경우, '스테이지 뷰 나누기'를 해줘야 함)

<br>

![alt text](/public/img/github_19.png)

'+' 버튼을 눌러 스테이지에 올려줍니다. (git add mdTest.md 명령어와 동일)

<br>

그 후, 커밋 버튼을 누르면 완료입니다.
![alt text](/public/img/github_20.png)

## 3-3. 커밋을 원격 저장소에 푸시하기

소스코드의 History를 봤을 때, 방금 커밋한 최신 커밋에는 [master]꼬리표가, 이전 버전에는 [origin/master]꼬리표가 붙은 것을 확인할 수 있습니다.

이는 원격저장소 버전이 아직 이전 버전이라는 의미입니다.

origin: 연결한 GitHub원격저장소 닉네임 (이전 포스팅에서 git remote add origin [원격저장소 주소]코드로 원격저장소에 추가해줬기 때문에 이와 같이 닉네임이 설정되었음)

master: 커밋을 올리는 줄기 이름. 따로 줄기 이름을 설정해주지 않으면 Git은 master라는 기본 줄기에 커밋을 올림.

![alt text](/public/img/github_21.png)

소스트리 상단이 [Push]버튼을 누르면 다음과 같이 창이 뜨는데, master 브랜치 푸시를 선택해준 후 Push버튼을 누릅니다.(git push origin master 명령어와 동일)

현재 줄기인 master의 모든 새로운 커밋을 원격저장소(origin)에 올린다는 의미입니다.

![alt text](/public/img/github_22.png)

이제 History를 확인해보면 [master]와 [origin/master]꼬리표가 최신 커밋에 같이 붙은 것을 확인할 수 있습니다.

![alt text](/public/img/github_23.png)

깃허브의 원격저장소를 확인해봐도 다음과 같이 커밋됐음을 확인할 수 있습니다.

[https://sourcetreeapp.com]: https://sourcetreeapp.com
[https://code.visualstudio.com]: [https://code.visualstudio.com]